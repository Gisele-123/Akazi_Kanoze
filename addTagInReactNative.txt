In a React Native app using TypeScript, you can create a tag component using the `TouchableOpacity` or `TouchableHighlight` component to make it interactive. Here's an example of how you can create a simple tag component:

```tsx
import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';

interface TagProps {
  label: string;
  onPress?: () => void;
}

const Tag: React.FC<TagProps> = ({ label, onPress }) => {
  return (
    <TouchableOpacity onPress={onPress} style={styles.container}>
      <Text style={styles.label}>{label}</Text>
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    backgroundColor: '#e0e0e0',
    borderRadius: 10,
    paddingHorizontal: 10,
    paddingVertical: 5,
    margin: 5,
  },
  label: {
    color: '#333',
  },
});

export default Tag;
```

In this example, the `Tag` component takes a `label` prop to display the text of the tag. It also accepts an optional `onPress` prop, which is a callback function that gets triggered when the tag is pressed.

To use the `Tag` component in your app:

1. Make sure you have the `Tag` component defined in a file (e.g., `Tag.tsx`).
2. Import the `Tag` component in the file where you want to use it.
3. Use the `Tag` component and provide the `label` and `onPress` props as needed.

Here's an example of how you might use the `Tag` component in another file:

```tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import Tag from './Tag'; // Import the Tag component from its file

const App: React.FC = () => {
  const handleTagPress = () => {
    console.log('Tag pressed!');
  };

  return (
    <View style={styles.container}>
      <Tag label="React Native" onPress={handleTagPress} />
      <Tag label="TypeScript" onPress={handleTagPress} />
      {/* Add more tags here */}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default App;
```

In this example, the `Tag` component is used twice with different labels, and the `handleTagPress` function is passed as the `onPress` prop for both tags.

Adjust the styles and behavior of the `Tag` component according to your app's design and requirements.